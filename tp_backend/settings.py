"""
Django settings for tp_backend project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import sys

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from dotenv import load_dotenv

load_dotenv()

REQUIRED_ENV_PROPETIES = [
    {
        "name": "DOMAIN",
        "requiredIf": None,
    },
    {"name": "PATH_TO_PRIVATE_KEY", "requiredIf": None},
    {"name": "PATH_TO_PUBLIC_KEY", "requiredIf": None},
]

DEFAULTSETTINGS = {}

for prop in REQUIRED_ENV_PROPETIES:
    if prop["name"] not in os.environ:
        raise Exception(f"Missing required environment variable: {prop['name']}")
    DEFAULTSETTINGS[prop["name"]] = os.getenv(prop["name"])

    if prop["requiredIf"] is not None:
        if os.getenv(prop["requiredIf"]) == prop["requiredIf"]:
            for req in prop["followedRequirements"]:
                if req not in os.environ:
                    raise Exception(f"Missing required environment variable: {req}")
                DEFAULTSETTINGS[req] = os.getenv(req)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent

APPS_DIR = BASE_DIR / "apps"
TP_BACKEND_STATIC_DIR = BASE_DIR / "static"
TP_BACKEND_STATIC_URL = "/resources/"
STATIC_URL = "/admin-resources/"
sys.path.insert(0, str(APPS_DIR))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*ptgd&)0owb79trrt5q35zkzz2z2&)vidmom5q6yjc!s1(74#6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["0.0.0.0", "localhost"]


# Application definition
CUSTOM_APPS = [
    "user",
    "review",
    "schools",
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
] + CUSTOM_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tp_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tp_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME", "tp"),
        "USER": os.environ.get("DB_USER", "tp"),
        "PASSWORD": os.environ.get("DB_PASS", "tp"),
        "HOST": os.environ.get("DB_SERVICE", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    },
}


AUTH_USER_MODEL = "user.User"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../"))

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Private/Public Key Settings
for file in [
    {
        "path": DEFAULTSETTINGS.get("PATH_TO_PUBLIC_KEY"),
        "name": "PUBLIC_KEY",
        "type": "public_key",
    },
    {
        "path": DEFAULTSETTINGS.get("PATH_TO_PRIVATE_KEY"),
        "name": "PRIVATE_KEY",
        "type": "private_key",
    },
]:
    try:
        with open(file.get("path"), "rb") as key_file:
            fileType = file.get("type")
            if not fileType:
                DEFAULTSETTINGS[file.get("name").replace("PATH_TO_", "")] = (
                    key_file.read()
                )
                continue

            if fileType == "public_key":
                DEFAULTSETTINGS[file.get("name").replace("PATH_TO_", "")] = (
                    serialization.load_pem_public_key(
                        key_file.read(),
                        backend=default_backend(),
                    )
                )

            if fileType == "private_key":
                DEFAULTSETTINGS[file.get("name").replace("PATH_TO_", "")] = (
                    serialization.load_pem_private_key(
                        key_file.read(),
                        password=None,  # Use a password here if your private key is encrypted
                        backend=default_backend(),
                    )
                )
    except:
        pass